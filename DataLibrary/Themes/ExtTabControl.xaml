<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:DataLibrary.CustomControl"
    xmlns:mwt="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
    xmlns:sys="clr-namespace:System;assembly=mscorlib">
    <!--  Region Tabcontrol style  -->

    <!--  TabControl Style Start  -->
    <local:ScrollbarOnFarRightConverter x:Key="scrollbarOnFarRightConverter" />
    <local:ScrollbarOnFarLeftConverter x:Key="scrollbarOnFarLeftConverter" />

    <!--
        This color will be used to draw a border around the TabControl, on
        the bottom of the TabPanel and on the bottom of unselected TabItems.
    -->
    <Color x:Key="BorderColor_Base">#888</Color>

    <!--
        This color will be used to draw the (outer) background of TabPages and
        the selected TabItem.
    -->
    <Color x:Key="TabControl_BackgroundColor_Base">#FF4D4D4E</Color>

    <!--  Brushes used for styling the TabControl  -->
    <SolidColorBrush x:Key="TabControl_BackgroundBrush_Base" Color="{StaticResource TabControl_BackgroundColor_Base}" />

    <!--  Brushes for drawing the outer and inner borders on TabPages  -->
    <SolidColorBrush x:Key="TabPage_InnerBorderBrushDark" Color="#FF8DB2E3" />
    <LinearGradientBrush x:Key="TabPage_InnerBorderBrushBright" StartPoint="0,0" EndPoint="1,1">
        <LinearGradientBrush.GradientStops>
            <GradientStop Offset="0" Color="Transparent" />
            <GradientStop Offset="1" Color="#FFC0F9FF" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <!--
        We only want to render a line between the TabControl's TabPage-area and
        the TabItemsPanel where there is no TabItem/TabStrip. However, we cannot
        simply set the TabPanel's Background-property as this would affect
        the area as a whole.
        The trick here is to define a gradient that only renders a 1px line at
        the bottom. Since TabItems are rendered above the background, this line
        will only be visible in the area that doesn't contain a TabItem.
        We'll achieve this effect by using a gradient that finishes with the
        border-color, but only for the last .01%.
    -->
    <!--<Color x:Key="TabPanel_BackgroundColor_Base">#ABCABC</Color>-->
    <Color x:Key="TabPanel_BackgroundColor_Base">Transparent</Color>
    <LinearGradientBrush x:Key="TabPanel_BackgroundBrush" StartPoint="0,0" EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <!--<GradientStop Offset="0.98" Color="Transparent"/>-->
            <GradientStop Offset="0.98" Color="{StaticResource TabPanel_BackgroundColor_Base}" />
            <GradientStop Offset="0.99" Color="{StaticResource BorderColor_Base}" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>


    <!--
        Margins for TabItems - these will be set in the respective triggers;
        also, the transition between two states will be animated using the Storyboards
        below.
    -->
    <!--<Thickness x:Key="TabPanel_Padding">4,0,0,0</Thickness>-->
    <Thickness x:Key="TabPanel_Padding">0,0,4,0</Thickness>
    <Thickness x:Key="TabPanelScrollPanel_Margin">0,0,0,2</Thickness>
    <!--<Thickness x:Key="TabPanel_Padding">0,0,4,0</Thickness>-->

    <!--  The colors that will be used when assembling the brushes for the LineButtons  -->
    <Color x:Key="LineButtonBackgroundColor_Bright">LightGoldenrodYellow</Color>
    <Color x:Key="LineButtonBackgroundColor_Dark">#FAEEB1</Color>
    <Color x:Key="LineButtonBackgroundColorDisabled_Bright">#EEE</Color>
    <Color x:Key="LineButtonBackgroundColorDisabled_Dark">#999</Color>

    <!--  Color of the border around the scrollbar-thumb  -->
    <SolidColorBrush x:Key="LineButtonBorderBrush" Color="#FF8693BD" />

    <!--  The color for the scrollbar's line-buttons when the mouse hovers over them  -->
    <LinearGradientBrush x:Key="LineButtonHoverBrush" StartPoint="0.5,0" EndPoint="0.5,1">
        <GradientStop Offset="0.3" Color="#FFFFD5A0" />
        <GradientStop Offset="0.51" Color="#FFFFA335" />
        <GradientStop Offset="0.986" Color="#FFFFC14A" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="LineButtonBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0.3" Color="{StaticResource LineButtonBackgroundColor_Bright}" />
        <GradientStop Offset="0.4" Color="{StaticResource LineButtonBackgroundColor_Dark}" />
        <GradientStop Offset="1" Color="{StaticResource LineButtonBackgroundColor_Bright}" />
    </LinearGradientBrush>


    <!--  The color for the scrollbar's line-buttons when they're clicked/pressed  -->
    <LinearGradientBrush x:Key="LineButtonPressedBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="{StaticResource LineButtonBackgroundColor_Bright}" />
        <GradientStop Offset="0.6" Color="{StaticResource LineButtonBackgroundColor_Dark}" />
        <GradientStop Offset="0.7" Color="{StaticResource LineButtonBackgroundColor_Bright}" />
    </LinearGradientBrush>

    <!--  The color to be used when drawing the arrows on the scrollbar's line-buttons  -->
    <SolidColorBrush x:Key="LineButtonBrush" Color="#FF14273D" />
    <!--  The color to be used for painting the interior of the TabItem-menu's path  -->
    <LinearGradientBrush x:Key="TabMenuButtonBrush" StartPoint="0,0" EndPoint="1,1">
        <GradientStop Offset="0" Color="White" />
        <GradientStop Offset="1" Color="#F3F3E3" />
    </LinearGradientBrush>

    <!--  The color for the scrollbar's line-buttons when they're disabled  -->
    <LinearGradientBrush x:Key="LineButtonDisabledBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="{StaticResource LineButtonBackgroundColorDisabled_Bright}" />
        <GradientStop Offset="1" Color="{StaticResource LineButtonBackgroundColorDisabled_Dark}" />
    </LinearGradientBrush>

    <!--  The background color of the TabItems popup-menu  -->
    <LinearGradientBrush x:Key="TabItemMenuBackcolor" StartPoint="0,0" EndPoint="1,1">
        <GradientStop Offset="0" Color="White" />
        <GradientStop Offset="1" Color="#EEE" />
    </LinearGradientBrush>

    <!--
        The Geometries below will be used to render the ScrollViewer's LineLeft-,
        LineRight- and TabMenu-buttons.
    -->
    <Geometry x:Key="ArrowLeft">M0,5 L10,10 10,0Z</Geometry>
    <Geometry x:Key="ArrowRight">M0,0 L10,5 L0,10Z</Geometry>
    <Geometry x:Key="TabMenuButton">M0,1 H0,5 M7,8 L0,8 0,2 10,2 L10,5 M10,8 L10,10 8,10Z</Geometry>

    <!--
        Definitions for the Path-Geometries that are being used to render
        the ScrollViewer's LineButtons.
    -->
    <Path
        x:Key="ArrowLeftPath"
        Margin="4,3"
        HorizontalAlignment="Center"
        VerticalAlignment="Center"
        Data="{StaticResource ArrowLeft}"
        Fill="{StaticResource LineButtonBrush}"
        Stretch="Fill"
        Stroke="{StaticResource LineButtonBrush}" />
    <Path
        x:Key="ArrowRightPath"
        Margin="4,3"
        HorizontalAlignment="Center"
        VerticalAlignment="Center"
        Data="{StaticResource ArrowRight}"
        Fill="{StaticResource LineButtonBrush}"
        Stretch="Fill"
        Stroke="{StaticResource LineButtonBrush}" />
    <Path
        x:Key="TabMenuButtonPath"
        Margin="2"
        HorizontalAlignment="Center"
        VerticalAlignment="Center"
        Data="{StaticResource TabMenuButton}"
        Fill="{StaticResource TabMenuButtonBrush}"
        Stretch="Fill"
        Stroke="{StaticResource LineButtonBrush}" />

    <!--
        This determines how wide/high the LineButtons and the TabMenu button
        will be rendered.
    -->
    <sys:Double x:Key="ButtonWidthAndHeight">16</sys:Double>

    <!--  Styles for the LineButtons  -->
    <Style x:Key="LineButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Height" Value="{StaticResource ButtonWidthAndHeight}" />
        <Setter Property="Width" Value="{StaticResource ButtonWidthAndHeight}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border
                        Name="ButtonBorder"
                        Margin="1"
                        Background="{StaticResource LineButtonBackgroundBrush}"
                        BorderBrush="{StaticResource LineButtonBorderBrush}"
                        BorderThickness="1"
                        CornerRadius="1">
                        <ContentPresenter HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="ButtonBorder" Property="Background" Value="{StaticResource LineButtonHoverBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="ButtonBorder" Property="Background" Value="{StaticResource LineButtonPressedBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="ButtonBorder" Property="Background" Value="{StaticResource LineButtonDisabledBrush}" />
                            <Setter TargetName="ButtonBorder" Property="Opacity" Value="0.4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
        The style for the MenuItem that represents the clickable portion
        for opening the sub-menu that itself will contain the list of
        TabItems.
    -->
    <Style x:Key="TabMenuButtonStyle" TargetType="{x:Type MenuItem}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Height" Value="{StaticResource ButtonWidthAndHeight}" />
        <Setter Property="Width" Value="{StaticResource ButtonWidthAndHeight}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border
                        Name="ButtonBorder"
                        Margin="1"
                        Background="{StaticResource LineButtonBackgroundBrush}"
                        BorderBrush="{StaticResource LineButtonBorderBrush}"
                        BorderThickness="1"
                        CornerRadius="1">
                        <Grid>
                            <ContentPresenter
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                Content="{StaticResource TabMenuButtonPath}"
                                ContentSource="Header" />
                            <Popup
                                Name="Popup"
                                AllowsTransparency="True"
                                Focusable="False"
                                IsOpen="{TemplateBinding IsSubmenuOpen}"
                                Placement="Bottom"
                                PopupAnimation="Fade">
                                <!--
                                    Since we override the ControlTemplate, we're also responsible
                                    for drawing stuff like the shadow around the popup-menu.
                                    
                                    Here, I'll use a Chrome that's provided in the Aero assembly.
                                    Note that, in order to use this (that is, the namespace defined
                                    at the very top of this window), a reference to
                                    PresentationFramework.Aero is required.
                                -->
                                <mwt:SystemDropShadowChrome
                                    Margin="0,0,8,8"
                                    CornerRadius="1"
                                    SnapsToDevicePixels="True"
                                    Color="{DynamicResource PrimaryBackColor}">
                                    <ContentControl
                                        Name="SubMenuBorder"
                                        IsTabStop="false"
                                        Template="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement},
                                                                                         ResourceId=SubmenuContent}}">
                                        <Border
                                            Background="{DynamicResource PrimaryBackBrush}"
                                            BorderBrush="{DynamicResource PrimaryBorderBrush}"
                                            BorderThickness="0.5">
                                            <ScrollViewer
                                                Name="SubMenuScrollViewer"
                                                CanContentScroll="true"
                                                SnapsToDevicePixels="True"
                                                Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement},
                                                                                              ResourceId=MenuScrollViewer}}">
                                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                                    <Canvas
                                                        Width="0"
                                                        Height="0"
                                                        HorizontalAlignment="Left"
                                                        VerticalAlignment="Top">
                                                        <Rectangle Width="{Binding ElementName=SubMenuBorder, Path=ActualWidth}" Height="{Binding ElementName=SubMenuBorder, Path=ActualHeight}" />
                                                    </Canvas>
                                                    <ItemsPresenter
                                                        Name="ItemsPresenter"
                                                        Grid.IsSharedSizeScope="true"
                                                        KeyboardNavigation.DirectionalNavigation="Cycle"
                                                        KeyboardNavigation.TabNavigation="Cycle"
                                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                                </Grid>
                                            </ScrollViewer>
                                        </Border>
                                    </ContentControl>
                                </mwt:SystemDropShadowChrome>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter TargetName="ButtonBorder" Property="Background" Value="{StaticResource LineButtonHoverBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  The style for MenuItems that represent TabItems  -->
    <Style x:Key="TabMenuItem" TargetType="{x:Type MenuItem}">
        <!--
            In order to not further pollute the sample with more
            ControlTemplates, I'll stick with simply overriding
            the HilightBrushKey for the hovered MenuItem.
            Poor man's Style. :-)
        -->
        <Style.Resources>
            <LinearGradientBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" StartPoint="0.5,0" EndPoint="0.5,1">
                <GradientStop Offset="0.3" Color="#FFFFD5A0" />
                <GradientStop Offset="0.51" Color="#FFEFA335" />
                <GradientStop Offset="0.986" Color="#FFFFC14A" />
            </LinearGradientBrush>
        </Style.Resources>

        <!--  This will help us bind to the Header of a TabItem  -->
        <Setter Property="Header" Value="{Binding Path=Header}" />
        <!--
            In order for MenuItems to support the IsEnabled state of a TabItem,
            we simply bind the IsEnabled property of the MenuItem to that of the
            TabItem.
            This way, a disabled TabItem will not be selectable via the Menu.
        -->
        <Setter Property="IsEnabled" Value="{Binding Path=IsEnabled}" />
        <!--
            By making the MenuItems checkable AND binding the IsChecked
            property to the IsSelected property of the TabItems, we'll
            efficiently allow to pick the selected TabItem from the Menu
            with a simple two-way binding.
        -->
        <Setter Property="IsCheckable" Value="{Binding Path=IsEnabled}" />
        <Setter Property="IsChecked" Value="{Binding Path=IsSelected, Mode=TwoWay}" />
        <Setter Property="Foreground" Value="{StaticResource MenuItem_ForegroundBrush}" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource MenuItem_DisabledForegroundBrush}" />
                <Setter Property="Background" Value="{StaticResource MenuItem_DisabledBackgroundBrush}" />
            </Trigger>
            <!--  Provide a hover-appearance for disabled MenuItems  -->
            <!--
               This won't work due to the fact that disabled items neither receive
               IsHighlighted nor IsMouseOver ... I'll leave this for now.
            <MultiTrigger>
               <MultiTrigger.Conditions>
                  <Condition SourceName="Border" Property="IsMouseOver" Value="True"/>
                  <Condition Property="IsEnabled" Value="False"/>
               </MultiTrigger.Conditions>
               <Setter Property="Background"
                                Value="{StaticResource MenuItem_DisabledBackgroundBrush}"/>
            </MultiTrigger>
            -->
        </Style.Triggers>
    </Style>

    <!--  The TabControl's Style.  -->
    <Style x:Name="TabControl" TargetType="{x:Type local:ExtTabControl}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="BorderThickness" Value="1,0,1,1" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ExtTabControl}">
                    <Grid KeyboardNavigation.TabNavigation="Local">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="23" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>

                        <!--
                            In order to still draw the LinearGradient that makes up for the bottom
                            line of the TabPanel, we need to wrap the ScrollViewer in a Border
                            control that will be responsible for drawing the background.
                        -->
                        <Border
                            Name="TabPanelBorder"
                            Height="Auto"
                            Background="Transparent">
                            <ScrollViewer
                                Name="svTP"
                                Grid.Row="0"
                                HorizontalScrollBarVisibility="Hidden"
                                SnapsToDevicePixels="True"
                                VerticalScrollBarVisibility="Disabled">
                                <ScrollViewer.Style>
                                    <Style TargetType="{x:Type ScrollViewer}">
                                        <Setter Property="Focusable" Value="False" />
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate>
                                                    <Grid
                                                        Grid.Row="0"
                                                        Grid.Column="0"
                                                        SnapsToDevicePixels="True">
                                                        <Grid.ColumnDefinitions>
                                                            <!--
                                                                The TabItems (resp. the TabPanel)
                                                                will appear here
                                                            -->
                                                            <ColumnDefinition Width="*" />
                                                            <!--
                                                                The following two columns will host
                                                                the Scrollbuttons
                                                            -->
                                                            <ColumnDefinition Width="Auto" />
                                                        </Grid.ColumnDefinitions>
                                                        <ScrollContentPresenter
                                                            x:Name="PART_ScrollContentPresenter"
                                                            Grid.Column="0"
                                                            Content="{TemplateBinding ScrollViewer.Content}"
                                                            SnapsToDevicePixels="True"
                                                            VirtualizingStackPanel.IsVirtualizing="False" />
                                                        <Grid
                                                            x:Name="gScrollButtons"
                                                            Grid.Column="1"
                                                            HorizontalAlignment="Right">
                                                            <Grid.RowDefinitions>
                                                                <RowDefinition Height="*" />
                                                                <RowDefinition Height="Auto" />
                                                            </Grid.RowDefinitions>
                                                            <StackPanel
                                                                Grid.Row="1"
                                                                Margin="0"
                                                                Orientation="Horizontal">
                                                                <!--
                                                                    The two RepeatButtons below will actually provide
                                                                    the scroll-functionality for the TabItems.
                                                                    Here, I'm utilizing the Page[Left/Right]Command;
                                                                    This could as well be using the
                                                                    Page[Left/Right]Command instead.
                                                                -->
                                                                <RepeatButton
                                                                    Command="ScrollBar.PageLeftCommand"
                                                                    Content="{StaticResource ArrowLeftPath}"
                                                                    IsEnabled="{Binding ElementName=svTP, Path=HorizontalOffset, Converter={StaticResource scrollbarOnFarLeftConverter}}"
                                                                    Style="{StaticResource LineButtonStyle}"
                                                                    ToolTip="View tabs on left side" />
                                                                <RepeatButton
                                                                    Command="ScrollBar.PageRightCommand"
                                                                    Content="{StaticResource ArrowRightPath}"
                                                                    Style="{StaticResource LineButtonStyle}"
                                                                    ToolTip="View tabs on right side">
                                                                    <RepeatButton.IsEnabled>
                                                                        <MultiBinding Converter="{StaticResource scrollbarOnFarRightConverter}">
                                                                            <Binding ElementName="svTP" Path="HorizontalOffset" />
                                                                            <Binding ElementName="svTP" Path="ViewportWidth" />
                                                                            <Binding ElementName="svTP" Path="ExtentWidth" />
                                                                        </MultiBinding>
                                                                    </RepeatButton.IsEnabled>
                                                                </RepeatButton>
                                                                <!--
                                                                    This will present another "button" which
                                                                    will open up the Menu containing all TabItems,
                                                                    with the selected one being checked.
                                                                    Clicking an item here will select the respective
                                                                    TabItem.
                                                                -->
                                                                <Menu
                                                                    Background="Transparent"
                                                                    BorderBrush="Transparent"
                                                                    BorderThickness="0"
                                                                    ToolTip="View all tabs">
                                                                    <MenuItem
                                                                        ItemContainerStyle="{StaticResource TabMenuItem}"
                                                                        ItemsSource="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TabControl}}, Path=Items}"
                                                                        Style="{StaticResource TabMenuButtonStyle}" />
                                                                </Menu>
                                                            </StackPanel>
                                                        </Grid>
                                                    </Grid>
                                                    <ControlTemplate.Triggers>
                                                        <DataTrigger Value="false">
                                                            <DataTrigger.Binding>
                                                                <MultiBinding Converter="{StaticResource scrollbarOnFarRightConverter}">
                                                                    <Binding ElementName="svTP" Path="HorizontalOffset" />
                                                                    <Binding ElementName="svTP" Path="ViewportWidth" />
                                                                    <Binding ElementName="svTP" Path="ExtentWidth" />
                                                                </MultiBinding>
                                                            </DataTrigger.Binding>
                                                        </DataTrigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </ScrollViewer.Style>
                                <!--  This is the area in which TabItems (the strips) will be drawn.  -->
                                <StackPanel
                                    Name="TabPanel"
                                    Margin="{StaticResource TabPanel_Padding}"
                                    Background="Transparent"
                                    IsItemsHost="true"
                                    KeyboardNavigation.TabIndex="1"
                                    Orientation="Horizontal" />

                            </ScrollViewer>
                        </Border>
                        <!--
                            This is the outer border of the TabControl itself, actually meaning
                            the Panel that will host a TabItem's content.
                            The top-border here will not be drawn as, otherwise, the TabPanel
                            would always show a thin line for the selected Tab (which we want
                            to avoid).
                        -->
                        <Border
                            Grid.Row="1"
                            Background="Transparent"
                            BorderThickness="0">
                            <!--  This is the first/outer Border drawn on the TabPage  -->
                            <Border
                                Margin="5,5,5,0"
                                BorderBrush="Transparent"
                                BorderThickness="0"
                                CornerRadius="3">
                                <!--
                                    This is the second/inner Border drawn on the TabPage.
                                    This Border is drawn with a horizontal Gradient that is transparent
                                    on the left which produces the fading effect.
                                -->
                                <Border
                                    Margin="0"
                                    BorderBrush="Transparent"
                                    BorderThickness="0">

                                    <!--
                                        This is where the Content of the selected TabPage
                                        will be rendered.
                                    -->
                                    <ContentPresenter
                                        x:Name="PART_SelectedContentHost"
                                        Margin="0"
                                        ContentSource="SelectedContent" />
                                </Border>
                            </Border>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  TabControl Style End  -->
    <!--  Endregion  -->

    <!--  Region Toolbar style  -->

</ResourceDictionary>