<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:System="clr-namespace:System;assembly=mscorlib"
	xmlns:controls="clr-namespace:System.Windows.Controls;assembly=System.Windows.Controls"
	xmlns:vsm="clr-namespace:System.Windows;assembly=System.Windows">

	<Style TargetType="{x:Type TreeView}">
		<Setter Property="Foreground" Value="{DynamicResource PrimaryForeBrush}" />
		<Setter Property="Background" Value="{DynamicResource PrimaryBackBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource PrimaryBorderBrush}" />
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="VerticalContentAlignment" Value="Top" />
		<Setter Property="Cursor" Value="Arrow" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Padding" Value="1" />
		<Setter Property="IsTabStop" Value="True" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TreeView}">
					<Grid>
						<Border
							Padding="{TemplateBinding Padding}"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}">
							<ScrollViewer
								x:Name="ScrollViewer"
								Background="{x:Null}"
								BorderBrush="Transparent"
								BorderThickness="0"
								HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
								IsTabStop="False"
								VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
								<ItemsPresenter Margin="0,1" />
							</ScrollViewer>
						</Border>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ExpandCollapseToggleStyle" TargetType="ToggleButton">
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToggleButton">
					<Grid
						Width="15"
						Height="13"
						Background="Transparent">
						<Path
							x:Name="ExpandPath"
							Margin="3,1,1,1"
							HorizontalAlignment="Left"
							VerticalAlignment="Center"
							Data="M 0,0 L 0,9 L 5,4.5 Z"
							Fill="{TemplateBinding Foreground}"
							Stroke="{TemplateBinding Foreground}"
							StrokeLineJoin="Miter" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="True">
							<Setter TargetName="ExpandPath" Property="Data" Value="M 6,0 L 6,6 L 0,6 Z" />
						</Trigger>
						<Trigger Property="IsChecked" Value="False">
							<Setter TargetName="ExpandPath" Property="Fill" Value="Transparent" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<Style x:Key="{x:Type TreeViewItem}" TargetType="{x:Type TreeViewItem}">
		<Setter Property="Padding" Value="3" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="VerticalContentAlignment" Value="Top" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryForeBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Cursor" Value="Arrow" />
		<Setter Property="IsTabStop" Value="True" />
		<Setter Property="Margin" Value="0,1,0,0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TreeViewItem}">

					<Grid Background="{x:Null}">
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto" />
							<RowDefinition Height="*" />
						</Grid.RowDefinitions>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="15" />
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>
						<Border
							Name="border"
							Grid.ColumnSpan="3"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}">

							<Grid Background="{x:Null}">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="15" />
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition Width="*" />
								</Grid.ColumnDefinitions>
								<ToggleButton
									x:Name="ExpanderButton"
									ClickMode="Press"
									Foreground="{TemplateBinding Foreground}"
									IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
									Style="{StaticResource ExpandCollapseToggleStyle}" />
								<Button
									x:Name="Header"
									Grid.Column="1"
									HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
									Background="{TemplateBinding Background}"
									BorderBrush="{TemplateBinding BorderBrush}"
									BorderThickness="{TemplateBinding BorderThickness}"
									ClickMode="Hover"
									Cursor="{TemplateBinding Cursor}"
									Focusable="False"
									Foreground="{TemplateBinding Foreground}"
									IsTabStop="False">
									<Button.Template>
										<ControlTemplate TargetType="Button">
											<Grid Name="HoverGrid">
												<Border
													x:Name="HoverRect"
													Grid.Column="1"
													Background="{TemplateBinding Background}"
													BorderBrush="{TemplateBinding BorderBrush}"
													BorderThickness="0"
													IsHitTestVisible="False" />
												<ContentPresenter
													x:Name="Content"
													Margin="{TemplateBinding Padding}"
													HorizontalAlignment="Left"
													Content="{TemplateBinding Content}"
													ContentTemplate="{TemplateBinding ContentTemplate}"
													Cursor="{TemplateBinding Cursor}" />
											</Grid>
											<!--<ControlTemplate.Triggers>
                                                 <MultiTrigger>
                                                 <MultiTrigger.Conditions>
                                                 <Condition SourceName="HoverGrid" Property="IsMouseOver" Value="True" />
                                                 </MultiTrigger.Conditions>
                                                 <MultiTrigger.Setters>
                                                 <Setter Property="Background" Value="{DynamicResource PrimaryHighlightBackBrush}" />
                                                 <Setter Property="Foreground" Value="{DynamicResource PrimaryHighlightForeBrush}" />
                                                 <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHighlightBorderBrush}" />
                                                 </MultiTrigger.Setters>
                                                 </MultiTrigger>
                                                 </ControlTemplate.Triggers>-->
										</ControlTemplate>

									</Button.Template>
									<Button.Content>
										<ContentPresenter Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" />
									</Button.Content>
								</Button>
							</Grid>
						</Border>
						<ItemsPresenter
							x:Name="ItemsHost"
							Grid.Row="1"
							Grid.Column="1"
							Grid.ColumnSpan="3"
							ScrollViewer.HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
							ScrollViewer.VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
							Visibility="Collapsed" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="HasItems" Value="False">
							<Setter TargetName="ExpanderButton" Property="Visibility" Value="Collapsed" />
						</Trigger>
						<Trigger SourceName="ExpanderButton" Property="IsChecked" Value="True">
							<Setter Property="IsExpanded" Value="True" />
						</Trigger>
						<Trigger SourceName="ExpanderButton" Property="IsChecked" Value="False">
							<Setter Property="IsExpanded" Value="False" />
						</Trigger>
						<Trigger Property="IsExpanded" Value="True">
							<Setter TargetName="ItemsHost" Property="Visibility" Value="Visible" />
						</Trigger>
						<Trigger Property="IsExpanded" Value="False">
							<Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
						</Trigger>
						<!--<MultiTrigger>
                             <MultiTrigger.Conditions>
                             <Condition Property="IsSelected" Value="False" />
                             <Condition SourceName="Header" Property="IsMouseOver" Value="True" />
                             </MultiTrigger.Conditions>
                             <MultiTrigger.Setters>
                             <Setter Property="Background" Value="{DynamicResource PrimaryHighlightBackBrush}" />
                             <Setter Property="Foreground" Value="{DynamicResource PrimaryHighlightForeBrush}" />
                             <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHighlightBorderBrush}" />
                             </MultiTrigger.Setters>
                             </MultiTrigger>-->
						<Trigger Property="IsSelected" Value="True">
							<Setter Property="Background" Value="{DynamicResource PrimaryFocusBackBrush}" />
							<Setter Property="Foreground" Value="{DynamicResource PrimaryFocusForeBrush}" />
							<Setter Property="BorderBrush" Value="{DynamicResource PrimaryFocusBorderBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style
		x:Key="MyTreeViewitemStyle"
		BasedOn="{StaticResource {x:Type TreeViewItem}}"
		TargetType="{x:Type TreeViewItem}">
		<Style.Triggers>
			<DataTrigger Binding="{Binding IsExpanded}" Value="True">
				<Setter Property="IsExpanded" Value="True" />
			</DataTrigger>
			<DataTrigger Binding="{Binding IsExpanded}" Value="False">
				<Setter Property="IsExpanded" Value="False" />
			</DataTrigger>
			<DataTrigger Binding="{Binding IsSelected}" Value="True">
				<Setter Property="IsSelected" Value="True" />
			</DataTrigger>
			<DataTrigger Binding="{Binding IsSelected}" Value="False">
				<Setter Property="IsSelected" Value="False" />
			</DataTrigger>
		</Style.Triggers>
	</Style>

</ResourceDictionary>